// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  reviews   Review[]
  addresses Address[]
  wishlist  Wishlist[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  salePrice   Float?
  sku         String   @unique
  inventory   Int      @default(0)
  images      String[]
  scentNotes  String[]
  size        String?
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
  reviews    Review[]
  wishlist   Wishlist[]
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean @default(false)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders Order[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAYMENT_PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  PAYSTACK
  BANK_TRANSFER
}

model Order {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber    String        @unique
  status         OrderStatus   @default(PENDING)
  total          Float
  subtotal       Float
  shippingCost   Float         @default(0)
  discount       Float         @default(0)
  promoCode      String?
  trackingNumber String?
  paymentStatus  String        @default("pending")
  paymentRef     String?
  paymentMethod  PaymentMethod @default(PAYSTACK)
  paymentProof   String? // For bank transfer screenshot
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  addressId String  @db.ObjectId
  address   Address @relation(fields: [addressId], references: [id])

  items OrderItem[]
}

model ShippingZone {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  state     String   @unique
  fee       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  price    Float

  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int
  comment    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}
